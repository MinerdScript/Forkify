var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "state", function () {
  return state;
});
_parcelHelpers.export(exports, "loadRecipe", function () {
  return loadRecipe;
});
_parcelHelpers.export(exports, "loadSearchResults", function () {
  return loadSearchResults;
});
_parcelHelpers.export(exports, "getSearchResultsPage", function () {
  return getSearchResultsPage;
});
_parcelHelpers.export(exports, "updateServings", function () {
  return updateServings;
});
_parcelHelpers.export(exports, "addBookmark", function () {
  return addBookmark;
});
_parcelHelpers.export(exports, "deleteBookmark", function () {
  return deleteBookmark;
});
_parcelHelpers.export(exports, "deleteAllBookmarks", function () {
  return deleteAllBookmarks;
});
_parcelHelpers.export(exports, "sortSearch", function () {
  return sortSearch;
});
_parcelHelpers.export(exports, "uploadRecipes", function () {
  return uploadRecipes;
});
require('regenerator-runtime');
var _configJs = require('./config.js');
var _helpersJs = require('./helpers.js');
const state = {
  recipe: {},
  search: {
    query: '',
    results: [],
    page: 1,
    resultsPerPage: _configJs.RES_PER_PAGE
  },
  bookmarks: []
};
const createRecipeObject = function (data) {
  const {recipe} = data.data;
  return {
    id: recipe.id,
    title: recipe.title,
    publisher: recipe.publisher,
    image: recipe.image_url,
    sourceUrl: recipe.source_url,
    servings: recipe.servings,
    cookingTime: recipe.cooking_time,
    ingredients: recipe.ingredients,
    ...recipe.key && ({
      key: recipe.key
    })
  };
};
const loadRecipe = async function (id) {
  try {
    const data = await _helpersJs.AJAX(`${_configJs.API_URL}${id}`);
    state.recipe = createRecipeObject(data);
    // Nutrition information using spoonacular API
    const arrayIngName = state.recipe.ingredients.map(ingredient => ingredient.description.toLowerCase());
    console.log(arrayIngName);
    const arrayIdIng = await arrayIngName.map(async function (ingName) {
      const dataIng = await _helpersJs.AJAX(`${_configJs.API_NUTR_URL}search?query=${ingName}&${_configJs.API_NUTR_KEY}`);
      console.log(dataIng);
      dataIng.results.forEach(ing => {
        if (ing.name === ingName) {
          console.log(ing.id);
          return ing.id;
        }
      });
    });
    console.log('2131', arrayIdIng);
    if (state.bookmarks.some(bookmark => bookmark.id === id)) state.recipe.bookmarked = true; else state.recipe.bookmarked = false;
  } catch (err) {
    throw err;
  }
};
const loadSearchResults = async function (query) {
  try {
    state.search.query = query;
    const data = await _helpersJs.AJAX(`${_configJs.API_URL}?search=${query}&${_configJs.API_KEY}`);
    state.search.results = data.data.recipes.map(rec => {
      return {
        id: rec.id,
        title: rec.title,
        publisher: rec.publisher,
        image: rec.image_url,
        ...rec.key && ({
          key: rec.key
        })
      };
    });
  } catch (err) {
    console.log(err);
    throw err;
  }
};
const getSearchResultsPage = function (page = state.search.page) {
  state.search.page = page;
  const start = (page - 1) * state.search.resultsPerPage;
  const end = page * state.search.resultsPerPage;
  return state.search.results.slice(start, end);
};
const updateServings = function (newServings) {
  state.recipe.ingredients.forEach(ing => {
    ing.quantity = ing.quantity * newServings / state.recipe.servings;
  });
  state.recipe.servings = newServings;
};
const persistBookmarks = function () {
  localStorage.setItem('bookmarks', JSON.stringify(state.bookmarks));
};
const addBookmark = function (recipe) {
  // Add bookmark
  state.bookmarks.push(recipe);
  // Mark current recipe as bookmarked
  if (recipe.id === state.recipe.id) state.recipe.bookmarked = true;
  persistBookmarks();
};
const deleteBookmark = function (id) {
  // if it is 2, it will remove the deleteAllBookmarks button, if it is 1, it will render it
  let deleteAll;
  const index = state.bookmarks.findIndex(el => el.id === id);
  state.bookmarks.splice(index, 1);
  // Mark current recipe as NOT bookmarked
  if (id === state.recipe.id) state.recipe.bookmarked = false;
  persistBookmarks();
  if (state.bookmarks.length === 0) {
    deleteAll = 2;
  } else {
    deleteAll = 1;
  }
  return deleteAll;
};
const deleteAllBookmarks = function () {
  let i = state.bookmarks.length;
  while (i) {
    state.bookmarks.pop();
    i--;
  }
  clearBookmarks();
  if (state.recipe.bookmarked) {
    state.recipe.bookmarked = false;
  }
};
const init = function () {
  const storage = localStorage.getItem('bookmarks');
  if (storage) state.bookmarks = JSON.parse(storage);
};
init();
// Clear bookmarks from local storage
const clearBookmarks = function () {
  localStorage.clear('bookmarks');
};
const sortSearch = function () {
  console.log(state);
  state.search.results.sort((A, B) => {
    for (let i = 0; i < A.title.length; i++) {
      if (A.title[i] > B.title[i]) return 1;
      if (B.title[i] > A.title[i]) return -1;
    }
    return -1;
  });
};
const uploadRecipes = async function (newRecipe) {
  try {
    const ingredients = Object.entries(newRecipe).filter(entry => entry[0].startsWith('ingredient') && entry[1] !== '').map(ing => {
      const ingArr = ing[1].split(',').map(el => el.trim());
      if (ingArr.length !== 3) throw new Error('Wrong ingredient format, please use the correct form.');
      const [quantity, unit, description] = ingArr;
      return {
        quantity: quantity ? +quantity : null,
        unit,
        description
      };
    });
    const recipe = {
      title: newRecipe.title,
      source_url: newRecipe.sourceUrl,
      image_url: newRecipe.image,
      publisher: newRecipe.publisher,
      cooking_time: +newRecipe.cookingTime,
      servings: +newRecipe.servings,
      ingredients
    };
    const data = await _helpersJs.AJAX(`${_configJs.API_URL}?key=${_configJs.API_KEY}`, recipe);
    state.recipe = createRecipeObject(data);
    addBookmark(state.recipe);
  } catch (err) {
    throw err;
  }
};
